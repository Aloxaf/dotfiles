# DESC: Emacs 风格语法的 bindkey
# C-v + 按键 以查看特殊按键的转义序列
zmodload zsh/zutil

local remove keymap

zparseopts r=remove M:=keymap

[[ $remove ]] && shift
[[ $keymap ]] && shift 2

function escape-single-key() {
    local -A name=(Up kcuu1   Down kcud1   Left kcub1   Right kcuf1)

    if (( $#1 == 1 )) {
        ret=$1
    } elif [[ ${(L)1} == "backspace" ]] {
        ret="^?"
    } elif [[ ${(L)1} == "space" ]] {
        ret=" "
    } elif (( $+name[$1] )) {
        ret="$terminfo[$name[$1]]"
    } else {
        print -P "%F{red}%BERROR: $1%b%F" >&2
    }
}

function escape-mod-key() {
    local mod=${(U)1[(ws:-:)1]} key=${(L)1[(ws:-:)2]}
    local -A modifier spkeys

    [[ $key == space ]] && key=" "

    if [[ $key == "backspace" ]] {
        modifier=("C" "^h" "M" "^[^?")
        ret="$modifier[$mod]"
    } elif (( $#key == 1 )) {
        modifier=(C "^" M "^[")
        ret="$modifier[$mod]${1[(ws:-:)2]}"
    } else {
        spkeys=(up A   down B   right C   left D)
        modifier=("C" "^[[1;5" "M" "^[[1;3")
        ret="$modifier[$mod]$spkeys[$key]"
    }
}

local escaped ret
local -a sequence=(${(s: :)1})

for i ($sequence) {
    if [[ $i == *-* ]] {
        escape-mod-key $i
    } else {
        escape-single-key $i
    }
    escaped+=$ret
}

bindkey $remove ${(kv)keymap} $escaped $2
