# DESC: Emacs 风格语法的 bindkey
# C-v + 按键 以查看特殊按键的转义序列
zmodload zsh/zutil

local -a remove keymap array

zparseopts -D r=remove M:=keymap A:=array

function escape-single-key() {
    local -A name=(
        up kcuu1   down kcud1   left kcub1   right kcuf1
        home khome  end kend  delete kdch1
    )

    if (( $#1 == 1 )) {
        ret=$1
    } elif [[ ${(L)1} == "backspace" ]] {
        ret="^?"
    } elif [[ ${(L)1} == "space" ]] {
        ret=" "
    } elif (( $+name[${(L)1}] )) {
        ret="$terminfo[$name[${(L)1}]]"
    } else {
        print -P "%F{red}%BERROR: $1%b%F" >&2
    }
}

function escape-mod-key() {
    local mod=${(U)1[(ws:-:)1]} key=${(L)1[(ws:-:)2]}
    local -A modifier spkeys

    [[ $key == space ]] && key=" "

    if [[ $key == "backspace" ]] {
        modifier=("C" "^h" "M" "^[^?")
        ret="$modifier[$mod]"
    } elif (( $#key == 1 )) {
        modifier=(C "^" M "^[")
        ret="$modifier[$mod]${1[(ws:-:)2]}"
    } else {
        spkeys=(up A   down B   right C   left D   end F   home H)
        modifier=("C" "^[[1;5" "M" "^[[1;3")
        ret="$modifier[$mod]$spkeys[$key]"
    }
}

function bind() {
    local escaped ret
    local -a sequence=(${(s: :)1})

    for i ($sequence) {
        if [[ $i == *-* ]] {
            escape-mod-key $i
        } else {
            escape-single-key $i
        }
        escaped+=$ret
    }

    bindkey $remove $keymap $escaped $2
}

if [[ $array ]]; then
    local k v
    for k v in ${(Pkv)${array[2]}}; do
        bind $k $v
    done
else
    bind $1 $2
fi
